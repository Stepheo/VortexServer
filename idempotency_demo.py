"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Idempotency-Key."""

import uuid
from typing import Dict, Any
from datetime import datetime, timedelta

# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
class IdempotencyManager:
    def __init__(self):
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ Redis –∏–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self._operations: Dict[str, Dict[str, Any]] = {}
        
    async def get_operation(self, key: str) -> Dict[str, Any] | None:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É."""
        operation = self._operations.get(key)
        if not operation:
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–ª—é—á (–æ–±—ã—á–Ω–æ 24 —á–∞—Å–∞)
        if datetime.now() > operation['expires_at']:
            del self._operations[key]
            return None
            
        return operation
    
    async def store_operation(self, key: str, result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        self._operations[key] = {
            'result': result,
            'created_at': datetime.now(),
            'expires_at': datetime.now() + timedelta(hours=24)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ DI)
idempotency_manager = IdempotencyManager()


async def upgrade_with_idempotency(
    idempotency_key: str, 
    source_instance_id: str, 
    target_gift_id: int
) -> Dict[str, Any]:
    """–ü—Ä–∏–º–µ—Ä –∞–ø–≥—Ä–µ–π–¥–∞ —Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é."""
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
    existing_result = await idempotency_manager.get_operation(idempotency_key)
    if existing_result:
        print(f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {idempotency_key}")
        return existing_result['result']
    
    # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤–ø–µ—Ä–≤—ã–µ
    print(f"üÜï –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é {idempotency_key}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–ø–≥—Ä–µ–π–¥–∞
    import random
    success = random.choice([True, False])
    
    result = {
        "txId": str(uuid.uuid4()),
        "success": success,
        "chance": 50.0,
        "finalAngle": random.uniform(0, 360),
        "rotationSpins": random.randint(3, 6),
        "consumedInstanceId": source_instance_id,
        "serverTime": datetime.now().isoformat()
    }
    
    if success:
        result["newItem"] = {
            "instanceId": f"inv_{random.randint(100000, 999999)}",
            "giftId": target_gift_id,
            "name": f"Gift #{target_gift_id}",
            "price": 100.0
        }
    
    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await idempotency_manager.store_operation(idempotency_key, result)
    
    return result


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏."""
    
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Idempotency-Key ===\n")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    key = str(uuid.uuid4())
    print(f"üîë Idempotency-Key: {key}\n")
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    result1 = await upgrade_with_idempotency(key, "inv_123", 42)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1['success']} | TX: {result1['txId'][:8]}...\n")
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º
    print("2Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º):")
    result2 = await upgrade_with_idempotency(key, "inv_123", 42)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2['success']} | TX: {result2['txId'][:8]}...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
    if result1 == result2:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã–µ - —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
    
    print(f"\nüéØ TX ID –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π: {result1['txId'] == result2['txId']}")
    print(f"üéØ Success –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π: {result1['success'] == result2['success']}")
    
    # –ù–æ–≤—ã–π –∫–ª—é—á = –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    print("\n" + "="*50)
    print("3Ô∏è‚É£ –ù–æ–≤—ã–π Idempotency-Key = –Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:")
    new_key = str(uuid.uuid4())
    result3 = await upgrade_with_idempotency(new_key, "inv_456", 84)
    print(f"–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result3['success']} | TX: {result3['txId'][:8]}...")


if __name__ == "__main__":
    import asyncio
    asyncio.run(demo())
